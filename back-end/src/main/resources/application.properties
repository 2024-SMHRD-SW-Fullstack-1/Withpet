spring.application.name=shop
server.port=8085

# smart
#spring.datasource.url=${smart-mysql-url}
#spring.datasource.username=${smart-mysql-id}
#spring.datasource.password=${smart-mysql-pw}

# azure
spring.datasource.url=${azure-mysql-url}
spring.datasource.username=${azure-mysql-id}
spring.datasource.password=${azure-mysql-pw}

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.jpa.properties.hibernate.show_sql=true
spring.jpa.hibernate.ddl-auto=update

#??? ?? ???? ??
#server.servlet.session.timout=5s
#server.servlet.session.cookie.max-age=5s

#if you want to save Session data to DB
#spirng.session.jdbc.initialize-schema=always

# Amazon S3 Bucket
spring.cloud.aws.credentials.accessKey=${aws-accesskey}
spring.cloud.aws.credentials.secretKey=${aws-secretkey}
spring.cloud.aws.s3.bucket=${aws-s3.bucket}
spring.cloud.aws.region.static=${aws-region.static}

logging.level.org.springframework.security=DEBUG

spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.serialization.fail-on-self-references=false

# Google OAuth
spring.security.oauth2.client.registration.google.client-id=${google-oauth-client-id}
spring.security.oauth2.client.registration.google.client-secret=${google-oauth-client-secret}
spring.security.oauth2.client.registration.google.scope=profile, email

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v3/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=sub

server.servlet.session.cookie.name=JSESSIONID
server.servlet.session.cookie.http-only=false
server.servlet.session.cookie.secure=false

#jwt
spring.jwt.secret=${jwt-secret}

spring.profiles.include=SECRET-KEY